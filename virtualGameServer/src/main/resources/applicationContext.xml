<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--开启@Autowire @PostConstruct @PreDestroy等注解-->
    <context:annotation-config/>

    <!--自动扫包配置-->
    <context:component-scan base-package="com.mmorpg.mbdl" />
    <!--规定@PacketHandle注解的请求包处理类只能放在模块的facade包下-->
    <context:component-scan base-package="com.mmorpg.mbdl.**.facade">
        <!--使@PacketHandle注解的类成为bean-->
        <context:include-filter type="annotation"
                                expression="com.mmorpg.mbdl.framework.communicate.websocket.annotation.PacketHandler"/>
    </context:component-scan>
    <!-- 使用cglib进行动态代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <bean class="com.github.xiaolyuh.manager.LayeringCacheManager">
        <constructor-arg ref="redisTemplate"/>
    </bean>
    <bean class="com.github.xiaolyuh.aspect.LayeringAspect"/>
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/>

    <!--加载全局配置-->
    <context:property-placeholder
            location="classpath*:server.properties,classpath*:dev.properties,classpath*:jdbc.properties,classpath*:redis.properties" />
    <!--缓存-->
    <!-- redis连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大空闲数-->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!--连接池的最大数据库连接数  -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!--最大建立连接等待时间-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
        <!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <!--在空闲时检查有效性, 默认false  -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}" />
    </bean >
    <!--redis连接工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy"
          p:usePool="true">
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <!--IP地址 -->
        <property name="hostName" value="${redis.hostName}"/>
        <!--端口号  -->
        <property name="port" value="${redis.port}"/>
        <!--如果Redis设置有密码  -->
        <!--<property name="password" value="${redis.password}" />-->
        <!--客户端超时时间单位是毫秒-->
        <property name="timeout" value="${redis.timeout}"/>
    </bean>
    <!--redis操作模版,使用该对象可以操作redis  -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer" >
            <bean class="com.github.xiaolyuh.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer" >
            <bean class="com.github.xiaolyuh.serializer.FastJsonRedisSerializer">
                <constructor-arg value="java.lang.Object"/>
                <constructor-arg value="com.mmorpg.mbdl.bussiness"/>
            </bean>
        </property>
        <property name="hashKeySerializer">
            <bean class="com.github.xiaolyuh.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="com.github.xiaolyuh.serializer.FastJsonRedisSerializer">
                <constructor-arg value="java.lang.Object"/>
                <constructor-arg value="com.mmorpg.mbdl.bussiness"/>
            </bean>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"/>
    </bean >

    <!--数据库配置-->
    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <!-- dao -->
    <jpa:repositories base-package="com.mmorpg.**.dao"
                      repository-impl-postfix="Impl" entity-manager-factory-ref="entityManagerFactory"/>
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"
        p:url="${jdbc.url}"
        p:username="${jdbc.username}"
        p:password="${jdbc.password}"

          p:initialSize="${jdbc.datasource.initialSize}"
          p:minIdle="${jdbc.datasource.minIdle}"
          p:maxActive="${jdbc.datasource.maxActive}"
          p:maxWait="${jdbc.datasource.maxWait}"
          p:timeBetweenEvictionRunsMillis="${jdbc.datasource.timeBetweenEvictionRunsMillis}"
          p:minEvictableIdleTimeMillis="${jdbc.datasource.minEvictableIdleTimeMillis}"
          p:validationQuery="${jdbc.datasource.validationQuery}"
          p:testWhileIdle="${jdbc.datasource.testWhileIdle}"
          p:testOnBorrow="${jdbc.datasource.testOnBorrow}"
          p:testOnReturn="${jdbc.datasource.testOnReturn}"
          p:poolPreparedStatements="${jdbc.datasource.poolPreparedStatements}"
          p:maxPoolPreparedStatementPerConnectionSize="${jdbc.datasource.maxPoolPreparedStatementPerConnectionSize}"
    />
    <bean id = "entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
          p:packagesToScan="com.mmorpg.**.entity"
    >
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                 p:generateDdl="true" p:showSql="false"
                  p:database="MYSQL" p:databasePlatform="org.hibernate.dialect.MySQL55Dialect"
            />
        </property>
    </bean>

</beans>